@page "/news"
@inherits NewsComponentBase

@attribute [Authorize]
@if (Context != null)
{
    <MudDataGrid Items="@NewsItems">
        <Columns>
            <PropertyColumn Property="@(x=>x.Title)"/>
            <PropertyColumn Property="@(x=>x.ScheduledAt)"/>
            <PropertyColumn Property="@(x=>x.ExpiresAt)"/>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => {EditItem(context.Item);})" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
    <MudDialog @ref=_editModal Options="new(){CloseButton=true, MaxWidth=MaxWidth.Medium, FullWidth=true}">
        <DialogContent>
            <NewsItemCard Item=_selectedItem ItemChanged="RefreshItems" />

        </DialogContent>
    </MudDialog>

 
    @if (DeletedCount > 0)
    {
        <MudFab OnClick=@(()=>{ShowRestoreItemsDialog();}) StartIcon="@Icons.Material.Filled.RestoreFromTrash" />
    }
}

@code {
    private MudDialog? _editModal;
    private NewsItem? _selectedItem;
    private int DeletedCount;
    private List<NewsItem> NewsItems = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Context.Database.ProviderName != "Microsoft.EntityFrameworkCore.InMemory")
        {
            if ((await Context.Database.GetPendingMigrationsAsync()).Count() > 0)
            {
                await Context.Database.MigrateAsync();
            }
        }


        await RefreshItems();
    }

    private async Task EditItem(NewsItem item)
    {
        _selectedItem = item;
        await _editModal.CloseAsync();
        await _editModal.ShowAsync();
    }

    private async Task RefreshItems()
    {
        NewsItems = await Factory.CreateDbContext().NewsItems.Where(x => x.DeletedAt == null).ToListAsync();
        DeletedCount = await Factory.CreateDbContext().NewsItems.CountAsync(x => x.DeletedAt != null);
        await _editModal.CloseAsync();
        await InvokeAsync(StateHasChanged);
    }
    private async void ShowNewItemDialog()
    {
        var options = new DialogOptions { CloseButton = true, BackdropClick = false };
        var dialog = await DialogService.ShowAsync<CreateItemDialog>("Create New News Item",options);
        if(dialog.Dialog is CreateItemDialog ciDialog)
        {
            ciDialog.OnItemCreated += RefreshItems;
        }
    } 
    private async void ShowRestoreItemsDialog()
    {
        var options = new DialogOptions { CloseButton = true, BackdropClick = false };
        var dialog = await DialogService.ShowAsync<ShowRestoreItemsDialog>("Restore News Item", options);
        if (dialog.Dialog is ShowRestoreItemsDialog ciDialog)
        {
            ciDialog.OnItemRestored += RefreshItems;
        }
    }

 

}

