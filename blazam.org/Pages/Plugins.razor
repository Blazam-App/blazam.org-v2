@page "/plugins"
@using blazam.org.Data.Plugins
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@inject IDbContextFactory<PluginsDbContext> PluginsDbFactory
@inject PluginAuthService PluginAuth
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Plugins - Blazam</PageTitle>

<MudContainer Class="pt-5 px-0">
    <MudText Typo="Typo.h2" Class="pb-7" Style="text-align:center">Blazam Plugins</MudText>
    <AuthorizeView Roles="@(UserRoles.SuperAdmin+","+UserRoles.VerifiedPluginUser)">
        <Authorized>
                <MudCard Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">Upload Plugin</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Color="Color.Error" OnClick="Logout">Logout</MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <EditForm Context="editContext" Model="@_uploadModel" OnValidSubmit="UploadPlugin">
                    <DataAnnotationsValidator />
                    
                    <MudTextField Label="Plugin Name" 
                        @bind-Value="_uploadModel.Name" 
                        For="@(() => _uploadModel.Name)" />
                        
                    <MudTextField Label="Description" 
                        @bind-Value="_uploadModel.Description" 
                        For="@(() => _uploadModel.Description)" 
                        Lines="3" />
                        
                        <MudFileUpload Accept=".zip" T="IBrowserFile"  FilesChanged="OnFileSelection">
                            <ActivatorContent>
                                <MudFab Color="Color.Success"
                                        StartIcon="@Icons.Material.Filled.AttachFile" />
                            </ActivatorContent>
                        </MudFileUpload>
                    @if (_selectedFile != null)
                    {
                        <MudText Class="mt-2">
                            Selected File: @_selectedFile.Name (@((_selectedFile.Size / 1024.0 / 1024.0)) MB)
                        </MudText>
                    }
                    
                    <MudButton ButtonType="ButtonType.Submit"
                        Disabled="@(_selectedFile == null)"
                        Variant="Variant.Filled"
                        Color="Color.Success"
                        Class="mt-4">Upload Plugin</MudButton>
                </EditForm>
            </MudCardContent>
        </MudCard>
        </Authorized>
        <NotAuthorized>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudCard Class="pa-4 mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5">Register</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <EditForm Context="editContext" Model="@_registrationModel" OnValidSubmit="RegisterUser">
                                <DataAnnotationsValidator />

                                <MudTextField Label="Username"
                                              name="username"
                                              @bind-Value="_registrationModel.Username"
                                              For="@(() => _registrationModel.Username)" />

                                <MudTextField Label="Email"
                                              name="email"
                                              @bind-Value="_registrationModel.Email"
                                              For="@(() => _registrationModel.Email)" />

                                <MudTextField Label="Password"
                                              @bind-Value="_registrationModel.Password"
                                              For="@(() => _registrationModel.Password)"
                                              InputType="InputType.Password" />

                                <MudTextField Label="Confirm Password"
                                              @bind-Value="_registrationModel.ConfirmPassword"
                                              For="@(() => _registrationModel.ConfirmPassword)"
                                              InputType="InputType.Password" />

                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           Class="mt-4">Register</MudButton>
                            </EditForm>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard Class="pa-4 mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5">Login</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <EditForm Context="editContext" Model="@_loginModel" OnValidSubmit="LoginUser">
                                <DataAnnotationsValidator />

                                <MudTextField Label="Email"
                                              @bind-Value="_loginModel.Email"
                                              For="@(() => _loginModel.Email)" />

                                <MudTextField Label="Password"
                                              @bind-Value="_loginModel.Password"
                                              For="@(() => _loginModel.Password)"
                                              InputType="InputType.Password" />

                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           Class="mt-4">Login</MudButton>
                            </EditForm>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </NotAuthorized>
    </AuthorizeView>
    
    <MudDivider Class="my-6" />
    
    <MudText Typo="Typo.h4" Class="mb-4">Available Plugins</MudText>
    
    <MudTextField @bind-Value="searchTerm" 
                  Label="Search plugins" 
                  Variant="Variant.Outlined" 
                  Adornment="Adornment.End" 
                  AdornmentIcon="@Icons.Material.Filled.Search" 
                  OnAdornmentClick="SearchPlugins"
                  Class="mb-4" />
    
    @if (_plugins == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (!_plugins.Any())
    {
        <MudAlert Severity="Severity.Info">No plugins found.</MudAlert>
    }
    else
    {
        <MudGrid>
            @foreach (var plugin in _plugins)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@plugin.Name</MudText>
                                <MudText Typo="Typo.body2">By @plugin.Author.Username</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2">@plugin.Description</MudText>
                            <MudText Typo="Typo.body2" Class="mt-2">Uploaded: @plugin.UploadedAt.ToString("MMM dd, yyyy")</MudText>
                            <MudText Typo="Typo.body2">Downloads: @plugin.Downloads</MudText>
                            <MudText Typo="Typo.body2">Size: @(plugin.FileSize / 1024.0 / 1024.0) MB</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" 
                                       Color="Color.Primary" 
                                       OnClick="() => DownloadPlugin(plugin.Id)">
                                Download
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private bool IsAuthenticated = false;
    private PluginUser _currentUser;
    private List<Plugin> _plugins;
    private IBrowserFile _selectedFile;
    private string searchTerm = "";
    
    private RegistrationModel _registrationModel = new();
    private LoginModel _loginModel = new();
    private UploadModel _uploadModel = new();
    
    protected override async Task OnInitializedAsync()
    {
        // Check if user is authenticated
        var userId = await GetUserIdFromCookie();
        if (userId.HasValue)
        {
            using var context = await PluginsDbFactory.CreateDbContextAsync();
            _currentUser = await context.Users.FindAsync(userId.Value);
            
            if (_currentUser != null && _currentUser.IsVerified)
            {
                IsAuthenticated = true;
            }
        }
        
        await LoadPlugins();
    }
    
    private async Task<int?> GetUserIdFromCookie()
    {
        try
        {
            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "blazam_plugin_user_id");
            if (!string.IsNullOrEmpty(userId) && int.TryParse(userId, out var id))
            {
                return id;
            }
        }
        catch { /* Ignore any JS interop errors */ }
        
        return null;
    }
    
    private async Task LoadPlugins(string search = null)
    {
        using var context = await PluginsDbFactory.CreateDbContextAsync();
        
        var query = context.Plugins
            .Include(p => p.Author)
            .AsQueryable();
            
        if (!string.IsNullOrWhiteSpace(search))
        {
            search = search.ToLower();
            query = query.Where(p => 
                p.Name.ToLower().Contains(search) || 
                p.Description.ToLower().Contains(search));
        }
        
        _plugins = await query
            .OrderByDescending(p => p.UploadedAt)
            .ToListAsync();
    }
    
    private async Task RegisterUser()
    {
        if (_registrationModel.Password != _registrationModel.ConfirmPassword)
        {
            Snackbar.Add("Passwords don't match", Severity.Error);
            return;
        }
        
        var result = await PluginAuth.RegisterUserAsync(
            _registrationModel.Email,
            _registrationModel.Username,
            _registrationModel.Password);
            
        if (result.success)
        {
            Snackbar.Add(result.message, Severity.Success);
            _registrationModel = new RegistrationModel();
        }
        else
        {
            Snackbar.Add(result.message, Severity.Error);
        }
    }
    
    private async Task LoginUser()
    {
        var user = await PluginAuth.AuthenticateAsync(
            _loginModel.Email, 
            _loginModel.Password.ToSecureString());
            
        if (user == null)
        {
            Snackbar.Add("Invalid email or password", Severity.Error);
            return;
        }
        
        if (!user.IsVerified)
        {
            Snackbar.Add("Please verify your email first", Severity.Warning);
            return;
        }
        
        _currentUser = user;
        IsAuthenticated = true;
        
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "blazam_plugin_user_id", user.Id.ToString());
        
        Snackbar.Add("Login successful", Severity.Success);
    }
    
    private async Task Logout()
    {
        _currentUser = null;
        IsAuthenticated = false;
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "blazam_plugin_user_id");
        Snackbar.Add("Logged out successfully", Severity.Info);
    }
    
    private void OnFileSelection(IBrowserFile file)
    {
        if (file.Size > 5 * 1024 * 1024) // 5MB in bytes
        {
            Snackbar.Add("File size exceeds the 5MB limit", Severity.Error);
            return;
        }
        
        _selectedFile = file;
    }
    
    private async Task UploadPlugin()
    {
        if (_selectedFile == null)
        {
            Snackbar.Add("Please select a file", Severity.Warning);
            return;
        }
        
        try
        {
            // Read file data
            using var ms = new MemoryStream();
            await _selectedFile.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
            byte[] fileData = ms.ToArray();
            
            // Create plugin
            var plugin = new Plugin
            {
                Name = _uploadModel.Name,
                Description = _uploadModel.Description,
                FileData = fileData,
                FileName = _selectedFile.Name,
                ContentType = _selectedFile.ContentType,
                FileSize = _selectedFile.Size,
                AuthorId = _currentUser.Id
            };
            
            // Save to database
            using var context = await PluginsDbFactory.CreateDbContextAsync();
            context.Plugins.Add(plugin);
            await context.SaveChangesAsync();
            
            Snackbar.Add("Plugin uploaded successfully", Severity.Success);
            _uploadModel = new UploadModel();
            _selectedFile = null;
            
            // Refresh plugin list
            await LoadPlugins();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task DownloadPlugin(int pluginId)
    {
        using var context = await PluginsDbFactory.CreateDbContextAsync();
        var plugin = await context.Plugins.FindAsync(pluginId);
        
        if (plugin == null)
        {
            Snackbar.Add("Plugin not found", Severity.Error);
            return;
        }
        
        // Increment download count
        plugin.Downloads++;
        await context.SaveChangesAsync();
        
        // Trigger file download
        await JSRuntime.InvokeVoidAsync(
            "downloadFileFromBytes", 
            Convert.ToBase64String(plugin.FileData), 
            plugin.FileName, 
            plugin.ContentType);
    }
    
    private async Task SearchPlugins()
    {
        await LoadPlugins(searchTerm);
    }
    
    public class RegistrationModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(128, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 128 characters")]
        public string Username { get; set; }
        
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }
        
        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters")]
        public string Password { get; set; }
        
        [Required(ErrorMessage = "Confirm password is required")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }
    
    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }
        
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
    
    public class UploadModel
    {
        [Required(ErrorMessage = "Plugin name is required")]
        [StringLength(100, MinimumLength = 3, ErrorMessage = "Name must be between 3 and 100 characters")]
        public string Name { get; set; }
        
        [Required(ErrorMessage = "Description is required")]
        public string Description { get; set; }
    }
}