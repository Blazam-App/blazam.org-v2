@inherits NewsComponentBase

@if (_item != null)
{


    <MudStack Spacing=0 Row=true Class="mud-width-full">
        <MudText Typo="Typo.h5">@_item.Title</MudText>
        <MudSpacer />

        <MudStack Spacing=0>
            <MudSwitch T=bool UnCheckedColor=Color.Error Color=Color.Success Label="Published" @bind-Value=_item.Published />
            <MudSwitch T=bool Color=Color.Warning Label="Debug" @bind-Value=_item.DevOnly />
        </MudStack>
    </MudStack>
    <MudStack Spacing=0>
        <MudStack Row=true>
            <MudStack Spacing=0>
                @if (_item.Icon != null)
                {
                    <Base64Image Data="@_item.Icon.ResizeRawImage(150)" />
                    <MudButton OnClick="@(() => { RemoveIcon(); })">Remove Icon</MudButton>
                }
                <MudFileUpload Context="fileContext" T="IBrowserFile" FilesChanged="((file) => { LoadIcon(file); })">

                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload Icon
                    </MudButton>
                </MudFileUpload>
            </MudStack>

            <MudTextField Label="Title" Immediate=true Required=true T="string" @bind-Text=@_item.Title />

        </MudStack>
        <MudTextField Label="Link" T="string" @bind-Text=@_item.Link />

        <MudTextField AutoGrow=true Label="Body" Immediate=true @bind-Value=@_item.Body />
        <MudCard>
            <MudCardHeader>
                Preview
            </MudCardHeader>
            <MudCardContent>
                @((MarkupString)_item.Body)
            </MudCardContent>
        </MudCard>
        <MudDatePicker Label="Start Date" @bind-Date=@_item.ScheduledAt />
        <MudDatePicker Label="End Date" MinDate="@_item.ScheduledAt" @bind-Date=@_item.ExpiresAt />

    </MudStack>

    <MudStack Class="mud-width-full">
        <MudStack Class="mud-width-full" Row=true>
            <MudSpacer />
            <MudButton Color=Color.Error
                       Variant=Variant.Filled
                       StartIcon="@Icons.Material.Outlined.Delete"
                       OnClick="@(()=>{DeleteItem();})">
                Delete
            </MudButton>

            <MudButton Color=Color.Success
                       Variant=Variant.Filled
                       StartIcon="@Icons.Material.Outlined.Delete"
                       OnClick="@(()=>{SaveItem();})">
                Save
            </MudButton>
        </MudStack>
        <MudStack Row=true Class="mud-width-full">
            <MudText Typo="Typo.caption">Created: @Item.CreatedAt.ToShortDateString() @_item.CreatedAt.ToShortTimeString()</MudText>
            <MudSpacer />
            <MudText Typo="Typo.caption">Updated: @Item.UpdatedAt.ToShortDateString() @_item.UpdatedAt.ToShortTimeString()</MudText>
        </MudStack>
    </MudStack>



}

@code {
    [Parameter]
    public EventCallback ItemChanged { get; set; }
    [Parameter]
    public NewsItem? Item { get; set; }
    public NewsItem? _item;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _item = await Context.NewsItems.FirstOrDefaultAsync(i => i.Id == Item.Id);
    }
    private async void RemoveIcon()
    {
        _item.Icon = null;
        //await Context.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async void LoadIcon(IBrowserFile e)
    {
        byte[] fileBytes;
        using (var stream = e.OpenReadStream(5000000))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                fileBytes = memoryStream.ToArray();
            }
        }
        var bytes = await e.ToByteArrayAsync(5000000);
        _item.Icon = bytes;

        await InvokeAsync(StateHasChanged);


    }
    private async Task DeleteItem()
    {
        _item.Published = false;
        _item.DeletedAt = DateTime.Now;
        SaveItem();
    }
    private async Task SaveItem()
    {
        _item.UpdatedAt = DateTime.Now;

        if (await Context.SaveChangesAsync() > 0)
        {

            ItemChanged.InvokeAsync();
            SnackbarService.Add("Changes have been saved", Severity.Success);

        }
    }
}