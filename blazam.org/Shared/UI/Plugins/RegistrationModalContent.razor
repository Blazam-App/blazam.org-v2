@using System.ComponentModel.DataAnnotations
<EditForm Context="editContext" Model="@_registrationModel" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />

    <MudTextField Label="Username"
                  name="username"
                  @bind-Value="_registrationModel.Username"
                  For="@(() => _registrationModel.Username)" />

    <MudTextField Label="Email"
                  name="email"
                  @bind-Value="_registrationModel.Email"
                  For="@(() => _registrationModel.Email)" />

    <MudTextField Label="Password"
                  @bind-Value="_registrationModel.Password"
                  For="@(() => _registrationModel.Password)"
                  InputType="InputType.Password" />

    <MudTextField Label="Confirm Password"
                  @bind-Value="_registrationModel.ConfirmPassword"
                  For="@(() => _registrationModel.ConfirmPassword)"
                  InputType="InputType.Password" />

    <MudButton ButtonType="ButtonType.Submit"
               Variant="Variant.Filled"
               Color="Color.Primary"
               Class="mt-4">Register</MudButton>
</EditForm>
@code {
    private RegistrationModel _registrationModel = new();
    [Inject]
    public  PluginAuthService PluginAuth { get; set; }

    [Inject]
    protected ISnackbar Snackbar { get; set; }


    private async Task RegisterUser()
    {
        if (_registrationModel.Password != _registrationModel.ConfirmPassword)
        {
            Snackbar.Add("Passwords don't match", Severity.Error);
            return;
        }

        var result = await PluginAuth.RegisterUserAsync(
            _registrationModel.Email,
            _registrationModel.Username,
            _registrationModel.Password);

        if (result.success)
        {
            Snackbar.Add(result.message, Severity.Success);
            _registrationModel = new RegistrationModel();
        }
        else
        {
            Snackbar.Add(result.message, Severity.Error);
        }
    }









    public class RegistrationModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(128, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 128 characters")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm password is required")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }
}
